@page "/cryptocurrencies"
@using DcaCalculator.WebUI.Data
@using MediatR
@using Application.Features.Queries.GetAllCryptocurrencies;
@inject IMediator Mediator
@inject UserSelectionService UserSelectionService

<PageTitle>Cryptocurrencies</PageTitle>

<h1>Cryptocurrencies</h1>

@if (cryptocurrencies == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>Selected cryptocurrencies for DCA Calculator: @UserSelectionService.Symbols</p>
    <p><a href="/calculator">Go to DCA Calculator</a></p>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Symbol</th>
                <th>Value</th>
                <th>Updated date</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var crypto in cryptocurrencies)
            {
                <tr>
                    <td>@crypto.Name</td>
                    <td>@crypto.Symbol</td>
                    <td>@crypto.Value.ToString("C", new System.Globalization.CultureInfo("en-US"))</td>
                    <td>@crypto.CreatedDate.Value.ToString("MM/dd/yyyy")</td>
                    <td>
                        @if (!UserSelectionService.Symbols.Contains(crypto.Symbol))
                        {
                            <a @onclick="()=> SelectItem(crypto.Symbol, crypto.CoinmarketCapId)">Add to DCA Calculator</a>
                        }
                        else
                        {
                            <a @onclick="()=> RemoveItem(crypto.Symbol, crypto.CoinmarketCapId)">Remove from DCA Calculator</a>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<GetAllCryptocurrenciesDto>? cryptocurrencies;

    protected override async Task OnInitializedAsync()
    {
        cryptocurrencies = await Mediator.Send(new GetAllCryptocurrenciesQuery());
    }

    private void SelectItem(string symbol, long coinmarketCapId)
    {
        UserSelectionService.Symbols +=
            $",{symbol}";
        UserSelectionService.Identifiers += $",{coinmarketCapId}";
    }

    private void RemoveItem(string symbol, long coinmarketCapId)
    {
        if (UserSelectionService.Symbols.Contains(","))
        {
            UserSelectionService.Symbols = UserSelectionService.Symbols.Replace($",{symbol}", string.Empty);
        }
        else
        {
            UserSelectionService.Symbols = UserSelectionService.Symbols.Replace($"{symbol}", string.Empty);
        }

        if (UserSelectionService.Identifiers.Contains(","))
        {
            UserSelectionService.Identifiers = UserSelectionService.Identifiers.Replace($",{symbol}", string.Empty);
        }
        else
        {
            UserSelectionService.Identifiers = UserSelectionService.Identifiers.Replace($"{symbol}", string.Empty);
        }
    }
}